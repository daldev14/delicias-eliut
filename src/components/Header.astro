---
import { REDES } from "@/consts";
import IconMenu from "@/components/icons/Menu.astro";
import IconClose from "@/components/icons/Close.astro";
import IconPaw from "@/components/icons/Paw.astro";

const navLinks = [
  { name: "Inicio", label: "inicio", url: "/#inicio" },
  { name: "Servicios", label: "servicios", url: "/#servicios" },
  { name: "IAA", label: "iaa", url: "/#iaa" },
  { name: "Sobre Nosotros", label: "sobre-nosotros", url: "/#sobre-nosotros" },
  { name: "Testimonios", label: "testimonios", url: "/#testimonios" },
];
---

<header class="w-full fixed z-50 border border-gray-200 shadow-sm bg-white">
  <div class="mx-auto max-w-screen-xl px-4 sm:px-6 lg:px-8">
    <div class="flex h-16 items-center justify-between md:h-24">
      <div class="md:flex md:items-center md:gap-12">
        <a href="/" class="block">
          <h1
            class="font-bold text-center uppercase text-xl md:text-xl lg:text-2xl"
          >
            <img
              src="./logo.svg"
              alt="mocato"
              class="size-16 object-cover object-center lg:size-24"
            />
            <span class="sr-only">Mocato</span>
          </h1>
        </a>
      </div>

      <div
        class="absolute z-50 w-full min-h-screen h-dvh bg-gray-50 top-0 right-0 px-10 pt-10 hidden"
        id="menuMobile"
      >
        <button
          class="absolute top-4 right-5 rounded bg-gray-100 p-1 text-gray-600 transition hover:text-gray-600/75"
          id="btnClose"
        >
          <span class="sr-only">Cerrar</span>
          <IconClose />
        </button>
        <nav>
          <ul class="flex flex-col gap-4 mb-10">
            {
              navLinks.map((link) => {
                return (
                  <li>
                    <a
                      class="font-medium text-xl text-gray-900 transition hover:text-gray-900/75"
                      aria-label={link?.label}
                      href={link?.url}
                    >
                      {link?.name}
                    </a>
                  </li>
                );
              })
            }
          </ul>

          <div>
            <p class="text-bold text-gray-900 text-xl mb-2">Redes Sociales</p>

            <div class="flex items-center gap-4">
              {
                REDES.map((item) => {
                  if (item?.isDisable) return false;
                  const Icon = item?.icon;

                  return (
                    <a
                      href={item?.href}
                      target="_blank"
                      rel="noopener noreferrer"
                      class="text-emerald-600 hover:text-emerald-800 transition-colors duration-200"
                      title={item?.title}
                    >
                      <Icon class="text-[#5E376D] transition-colors hover:text-[#5E376D]/90" />
                    </a>
                  );
                })
              }
            </div>
          </div>
        </nav>
      </div>

      <div class="hidden md:block">
        <nav>
          <ul class="flex items-center gap-6 lg:gap-10">
            {
              navLinks.map((link) => {
                return (
                  <li>
                    <a
                      class="font-medium uppercase text-gray-900 transition hover:text-gray-900/75"
                      aria-label={link?.label}
                      href={link?.url}
                    >
                      {link?.name}
                    </a>
                  </li>
                );
              })
            }
          </ul>
        </nav>
      </div>

      <div class="flex items-center gap-4">
        <div class="sm:flex sm:gap-4">
          <a
            href="/#contacto"
            class="inline-flex items-center justify-center gap-2 whitespace-nowrap text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 bg-[#5E376D] text-white hover:bg-[#5E376D]/90 h-11 px-8 rounded-full md:text-base"
          >
            <IconPaw />
            <span>Contacto</span>
          </a>
        </div>

        <div class="block md:hidden">
          <button
            class="rounded bg-white p-2 text-black transition hover:text-black/75"
            id="btnOpen"
          >
            <span class="sr-only">Cerrar</span>
            <IconMenu />
          </button>
        </div>
      </div>
    </div>
  </div>
</header>

<script>
  document.addEventListener("astro:page-load", (e) => {
    const menu = document.querySelector("#menuMobile");
    const btnOpen = document.querySelector("#btnOpen");
    const btnClose = document.querySelector("#btnClose");
    const sections = document.querySelectorAll(".section");
    const navItems = document.querySelectorAll("header nav ul li a");

    const toggleMenu = () => menu?.classList.toggle("hidden");

    btnOpen?.addEventListener("click", toggleMenu);
    btnClose?.addEventListener("click", toggleMenu);

    navItems.forEach((item) => {
      item.addEventListener("click", () => {
        menu?.classList.add("hidden");
      });
    });

    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add(
                "!text-primary",
                "!hover:text-primary/75",
                "!font-bold"
              );
            } else {
              item.classList.remove(
                "!text-primary",
                "!hover:text-primary/75",
                "!font-bold"
              );
            }
          });
        }
      });
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.4,
    });

    sections.forEach((section) => {
      observer.observe(section);
    });

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section);
        });
      }
    };
  });
</script>
